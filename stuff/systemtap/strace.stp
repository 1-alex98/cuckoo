/* Copyright (C) 2015-2017 Cuckoo Foundation.
 # This file is part of Cuckoo Sandbox - http://www.cuckoosandbox.org
 # See the file 'docs/LICENSE' for copying permission.
 #
 # Based on the Systemtap "strace.stp" example, adapted to our needs
 */

%{
#include <linux/sched.h>
#include <linux/list.h>
#include <linux/kernfs.h>
#include <linux/cgroup-defs.h>
%}
/* configuration options; set these with stap -G */
global timestamp = 1     /* -Gtimestamp=0 means don't print a syscall timestamp */

global thread_argstr%
global thread_scname%
global thread_time%

global syscalls_nonreturn
probe begin  {
    /* list those syscalls that never .return */
    syscalls_nonreturn["exit"] = 1
    syscalls_nonreturn["exit_group"] = 1
}

probe nd_syscall.* {
    if (pid() == target()) next         # skip our own helper process
    containerId= getDockerContainerId()
    if ((!target_set_pid(pid())) && containerId=="") next    # Skip the process that are not children of the cuckoo agent and that are not running inside a docker container

    t = tid()

    /* last syscall that could've returned didn't */
    if (thread_argstr[t] != "")
        report(thread_scname[t], thread_argstr[t], "", containerId)

    thread_argstr[t] = argstr
    thread_scname[t] = name
    if (timestamp)
        thread_time[t] = gettimeofday_us()

    if (name in syscalls_nonreturn)
        report(name, argstr, "", containerId)
}

probe nd_syscall.*.return {
    if (pid() == target()) next                                             # Skip if the pid belongs to the cuckoo agent, the stap.io process also has this pid
    containerId= getDockerContainerId()
    if ((!target_set_pid(pid())) && containerId=="") next    # Skip the process that are not children of the cuckoo agent and that are not running inside a docker container

    report(name, thread_argstr[tid()], retstr, containerId)
}

function report(syscall_name, syscall_argstr, syscall_retstr, containerId) {
    t = tid()

    if (timestamp) {
        then = thread_time[t]

        if (timestamp)
            prefix = sprintf("%s.%06d ", ctime(then / 1000000), then % 1000000)

        delete thread_time[t]
    }

    prefix .= sprintf("%s|%s@%x[%d] ", containerId, execname(), uaddr(), t)


    syscall_argstr = str_replace(syscall_argstr, "(", "\\x28")
    syscall_argstr = str_replace(syscall_argstr, ")", "\\x29")

    if (syscall_retstr == "")
        printf("%s%s(%s)\n", prefix, syscall_name, syscall_argstr)
    else
        printf("%s%s(%s) = %s\n", prefix, syscall_name, syscall_argstr, syscall_retstr)

    delete thread_argstr[t]
    delete thread_scname[t]
}

function getDockerContainerId:string(){
    for(i=0; i<maxSubsys();i++){
        cgroup = getCgroup(i)
        if(cgroup =~ "/docker/.*"){
            return str_replace(cgroup,"/docker/","")
        }
    }
    return ""
}

function maxSubsys:long()%{
    STAP_RETURN (CGROUP_SUBSYS_COUNT);
%}

function getCgroup:string(i:long)%{
        struct task_struct *currently_observed_task = current;
        char fileName[400]; //512 is the limit for the stack frame sze
        struct css_set *cgroups = currently_observed_task->cgroups;
        struct cgroup_subsys_state **subsys = cgroups->subsys;
        struct cgroup_subsys_state *firstSubsys = subsys[(int)STAP_ARG_i];
        struct cgroup *cgroup = firstSubsys->cgroup;
        struct kernfs_node *kn = cgroup->kn;
        int result = kernfs_path_from_node(kn, NULL, fileName, 400*sizeof(char));
        if (result < 0) STAP_ERROR ("cannot resolve cgroup");
        snprintf(STAP_RETVALUE, 400, "%s", fileName);
%}
